 import tensorflow as tf
import numpy as np

npfeatures = np.array(DWTMFCCFeatures200files5categ2['Features'])
nplabels = np.array(DWTMFCCFeatures200files5categ2['Lables'])

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(npfeatures, nplabels, test_size=0.30, random_state=42)


n_nodes_hl1 = 500
n_nodes_hl2 = 500 
n_nodes_hl3 = 500

n_classes = 5
batch_size = 100

x = tf.placeholder('float', [None, 480]) # Colomns
y = tf.placeholder('float', [None, 5]) 

def neural_network_model(data):
    hidden_1_layer = {'weights':tf.Variable(tf.random_normal([480, n_nodes_hl1])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl1]))}

    hidden_2_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl1, n_nodes_hl2])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl2]))}

    hidden_3_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl2, n_nodes_hl3])),
                      'biases':tf.Variable(tf.random_normal([n_nodes_hl3]))}

    output_layer = {'weights':tf.Variable(tf.random_normal([n_nodes_hl3, n_classes])),
                    'biases':tf.Variable(tf.random_normal([n_classes])),}


    l1 = tf.add(tf.matmul(data,hidden_1_layer['weights']), hidden_1_layer['biases'])
    l1 = tf.nn.relu(l1)

    l2 = tf.add(tf.matmul(l1,hidden_2_layer['weights']), hidden_2_layer['biases'])
    l2 = tf.nn.relu(l2)

    l3 = tf.add(tf.matmul(l2,hidden_3_layer['weights']), hidden_3_layer['biases'])
    l3 = tf.nn.relu(l3)

    output = tf.matmul(l3,output_layer['weights']) + output_layer['biases']

    return output

def train_neural_network(x):
    prediction = neural_network_model(x)
   
    cost = tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=prediction, labels=y) )
    optimizer = tf.train.AdamOptimizer().minimize(cost)
    
    hm_epochs = 760
    with tf.Session() as sess:
       
        sess.run(tf.global_variables_initializer())
        
        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))
        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
        for epoch in range(hm_epochs):
            epoch_loss = 0
            i = 0
            for _ in range(240):
                epoch_x = X_train[i : i + 39, :]
                epoch_y = y_train[i : i + 39, :]
                
                _, c = sess.run([optimizer, cost], feed_dict={x: epoch_x, y: epoch_y})
                epoch_loss += c
                i += 40
            aa = accuracy.eval({x:X_test, y:y_test})
            print('Epoch', epoch, 'completed out of',hm_epochs,'  loss:',epoch_loss, '    accuracy =', aa )

                
#        print('Accuracy:',accuracy)

        
train_neural_network(x)